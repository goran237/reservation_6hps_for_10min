/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6565.0, "minX": 0.0, "maxY": 60406.0, "series": [{"data": [[0.0, 6565.0], [0.1, 6565.0], [0.2, 6565.0], [0.3, 12711.0], [0.4, 12711.0], [0.5, 18696.0], [0.6, 18696.0], [0.7, 18696.0], [0.8, 24682.0], [0.9, 24682.0], [1.0, 30541.0], [1.1, 30541.0], [1.2, 30541.0], [1.3, 36469.0], [1.4, 36469.0], [1.5, 42352.0], [1.6, 42352.0], [1.7, 49273.0], [1.8, 49273.0], [1.9, 49273.0], [2.0, 55225.0], [2.1, 55225.0], [2.2, 58830.0], [2.3, 58830.0], [2.4, 58830.0], [2.5, 58831.0], [2.6, 58831.0], [2.7, 58832.0], [2.8, 58832.0], [2.9, 58833.0], [3.0, 58833.0], [3.1, 58833.0], [3.2, 58833.0], [3.3, 58833.0], [3.4, 58834.0], [3.5, 58834.0], [3.6, 58834.0], [3.7, 58834.0], [3.8, 58834.0], [3.9, 58834.0], [4.0, 58834.0], [4.1, 58834.0], [4.2, 58834.0], [4.3, 58834.0], [4.4, 58834.0], [4.5, 58834.0], [4.6, 58835.0], [4.7, 58835.0], [4.8, 58835.0], [4.9, 58835.0], [5.0, 58835.0], [5.1, 58835.0], [5.2, 58835.0], [5.3, 58835.0], [5.4, 58835.0], [5.5, 58835.0], [5.6, 58835.0], [5.7, 58835.0], [5.8, 58835.0], [5.9, 58835.0], [6.0, 58835.0], [6.1, 58835.0], [6.2, 58835.0], [6.3, 58835.0], [6.4, 58835.0], [6.5, 58835.0], [6.6, 58835.0], [6.7, 58835.0], [6.8, 58835.0], [6.9, 58835.0], [7.0, 58835.0], [7.1, 58835.0], [7.2, 58835.0], [7.3, 58836.0], [7.4, 58836.0], [7.5, 58836.0], [7.6, 58836.0], [7.7, 58836.0], [7.8, 58836.0], [7.9, 58836.0], [8.0, 58836.0], [8.1, 58836.0], [8.2, 58837.0], [8.3, 58837.0], [8.4, 58837.0], [8.5, 58837.0], [8.6, 58837.0], [8.7, 58837.0], [8.8, 58837.0], [8.9, 58837.0], [9.0, 58837.0], [9.1, 58837.0], [9.2, 58837.0], [9.3, 58837.0], [9.4, 58837.0], [9.5, 58837.0], [9.6, 58837.0], [9.7, 58837.0], [9.8, 58837.0], [9.9, 58837.0], [10.0, 58837.0], [10.1, 58837.0], [10.2, 58837.0], [10.3, 58837.0], [10.4, 58837.0], [10.5, 58837.0], [10.6, 58838.0], [10.7, 58838.0], [10.8, 58838.0], [10.9, 58838.0], [11.0, 58838.0], [11.1, 58838.0], [11.2, 58838.0], [11.3, 58838.0], [11.4, 58838.0], [11.5, 58838.0], [11.6, 58838.0], [11.7, 58838.0], [11.8, 58838.0], [11.9, 58838.0], [12.0, 58838.0], [12.1, 58838.0], [12.2, 58838.0], [12.3, 58838.0], [12.4, 58838.0], [12.5, 58839.0], [12.6, 58839.0], [12.7, 58839.0], [12.8, 58839.0], [12.9, 58839.0], [13.0, 58839.0], [13.1, 58839.0], [13.2, 58839.0], [13.3, 58839.0], [13.4, 58839.0], [13.5, 58839.0], [13.6, 58839.0], [13.7, 58839.0], [13.8, 58839.0], [13.9, 58839.0], [14.0, 58839.0], [14.1, 58839.0], [14.2, 58839.0], [14.3, 58839.0], [14.4, 58839.0], [14.5, 58839.0], [14.6, 58839.0], [14.7, 58839.0], [14.8, 58839.0], [14.9, 58839.0], [15.0, 58839.0], [15.1, 58839.0], [15.2, 58839.0], [15.3, 58839.0], [15.4, 58839.0], [15.5, 58839.0], [15.6, 58839.0], [15.7, 58839.0], [15.8, 58839.0], [15.9, 58839.0], [16.0, 58839.0], [16.1, 58839.0], [16.2, 58839.0], [16.3, 58839.0], [16.4, 58839.0], [16.5, 58839.0], [16.6, 58839.0], [16.7, 58839.0], [16.8, 58839.0], [16.9, 58840.0], [17.0, 58840.0], [17.1, 58840.0], [17.2, 58840.0], [17.3, 58840.0], [17.4, 58840.0], [17.5, 58840.0], [17.6, 58840.0], [17.7, 58840.0], [17.8, 58840.0], [17.9, 58840.0], [18.0, 58840.0], [18.1, 58840.0], [18.2, 58840.0], [18.3, 58840.0], [18.4, 58840.0], [18.5, 58840.0], [18.6, 58840.0], [18.7, 58840.0], [18.8, 58840.0], [18.9, 58840.0], [19.0, 58840.0], [19.1, 58840.0], [19.2, 58840.0], [19.3, 58840.0], [19.4, 58840.0], [19.5, 58840.0], [19.6, 58840.0], [19.7, 58840.0], [19.8, 58841.0], [19.9, 58841.0], [20.0, 58841.0], [20.1, 58841.0], [20.2, 58841.0], [20.3, 58841.0], [20.4, 58841.0], [20.5, 58841.0], [20.6, 58841.0], [20.7, 58841.0], [20.8, 58841.0], [20.9, 58841.0], [21.0, 58841.0], [21.1, 58841.0], [21.2, 58841.0], [21.3, 58841.0], [21.4, 58841.0], [21.5, 58841.0], [21.6, 58841.0], [21.7, 58841.0], [21.8, 58841.0], [21.9, 58841.0], [22.0, 58841.0], [22.1, 58841.0], [22.2, 58841.0], [22.3, 58841.0], [22.4, 58841.0], [22.5, 58841.0], [22.6, 58841.0], [22.7, 58841.0], [22.8, 58841.0], [22.9, 58842.0], [23.0, 58842.0], [23.1, 58842.0], [23.2, 58842.0], [23.3, 58842.0], [23.4, 58842.0], [23.5, 58842.0], [23.6, 58842.0], [23.7, 58842.0], [23.8, 58842.0], [23.9, 58842.0], [24.0, 58842.0], [24.1, 58842.0], [24.2, 58842.0], [24.3, 58842.0], [24.4, 58842.0], [24.5, 58842.0], [24.6, 58842.0], [24.7, 58842.0], [24.8, 58842.0], [24.9, 58842.0], [25.0, 58842.0], [25.1, 58842.0], [25.2, 58842.0], [25.3, 58842.0], [25.4, 58842.0], [25.5, 58842.0], [25.6, 58842.0], [25.7, 58842.0], [25.8, 58842.0], [25.9, 58842.0], [26.0, 58842.0], [26.1, 58842.0], [26.2, 58842.0], [26.3, 58842.0], [26.4, 58842.0], [26.5, 58842.0], [26.6, 58842.0], [26.7, 58842.0], [26.8, 58842.0], [26.9, 58842.0], [27.0, 58843.0], [27.1, 58843.0], [27.2, 58843.0], [27.3, 58843.0], [27.4, 58843.0], [27.5, 58843.0], [27.6, 58843.0], [27.7, 58843.0], [27.8, 58843.0], [27.9, 58843.0], [28.0, 58843.0], [28.1, 58843.0], [28.2, 58843.0], [28.3, 58843.0], [28.4, 58843.0], [28.5, 58843.0], [28.6, 58843.0], [28.7, 58843.0], [28.8, 58843.0], [28.9, 58843.0], [29.0, 58843.0], [29.1, 58843.0], [29.2, 58843.0], [29.3, 58843.0], [29.4, 58843.0], [29.5, 58843.0], [29.6, 58843.0], [29.7, 58843.0], [29.8, 58843.0], [29.9, 58843.0], [30.0, 58843.0], [30.1, 58843.0], [30.2, 58843.0], [30.3, 58843.0], [30.4, 58843.0], [30.5, 58843.0], [30.6, 58843.0], [30.7, 58843.0], [30.8, 58843.0], [30.9, 58843.0], [31.0, 58843.0], [31.1, 58843.0], [31.2, 58843.0], [31.3, 58843.0], [31.4, 58843.0], [31.5, 58843.0], [31.6, 58843.0], [31.7, 58843.0], [31.8, 58843.0], [31.9, 58843.0], [32.0, 58843.0], [32.1, 58843.0], [32.2, 58843.0], [32.3, 58843.0], [32.4, 58843.0], [32.5, 58843.0], [32.6, 58843.0], [32.7, 58844.0], [32.8, 58844.0], [32.9, 58844.0], [33.0, 58844.0], [33.1, 58844.0], [33.2, 58844.0], [33.3, 58844.0], [33.4, 58844.0], [33.5, 58844.0], [33.6, 58844.0], [33.7, 58844.0], [33.8, 58844.0], [33.9, 58844.0], [34.0, 58844.0], [34.1, 58844.0], [34.2, 58844.0], [34.3, 58844.0], [34.4, 58844.0], [34.5, 58844.0], [34.6, 58844.0], [34.7, 58844.0], [34.8, 58844.0], [34.9, 58844.0], [35.0, 58844.0], [35.1, 58844.0], [35.2, 58844.0], [35.3, 58844.0], [35.4, 58844.0], [35.5, 58844.0], [35.6, 58844.0], [35.7, 58844.0], [35.8, 58844.0], [35.9, 58844.0], [36.0, 58844.0], [36.1, 58844.0], [36.2, 58844.0], [36.3, 58844.0], [36.4, 58844.0], [36.5, 58844.0], [36.6, 58845.0], [36.7, 58845.0], [36.8, 58845.0], [36.9, 58845.0], [37.0, 58845.0], [37.1, 58845.0], [37.2, 58845.0], [37.3, 58845.0], [37.4, 58845.0], [37.5, 58845.0], [37.6, 58845.0], [37.7, 58845.0], [37.8, 58845.0], [37.9, 58845.0], [38.0, 58845.0], [38.1, 58845.0], [38.2, 58845.0], [38.3, 58845.0], [38.4, 58845.0], [38.5, 58845.0], [38.6, 58845.0], [38.7, 58845.0], [38.8, 58845.0], [38.9, 58845.0], [39.0, 58845.0], [39.1, 58845.0], [39.2, 58845.0], [39.3, 58845.0], [39.4, 58845.0], [39.5, 58845.0], [39.6, 58845.0], [39.7, 58845.0], [39.8, 58845.0], [39.9, 58845.0], [40.0, 58845.0], [40.1, 58845.0], [40.2, 58845.0], [40.3, 58845.0], [40.4, 58845.0], [40.5, 58845.0], [40.6, 58845.0], [40.7, 58845.0], [40.8, 58845.0], [40.9, 58846.0], [41.0, 58846.0], [41.1, 58846.0], [41.2, 58846.0], [41.3, 58846.0], [41.4, 58846.0], [41.5, 58846.0], [41.6, 58846.0], [41.7, 58846.0], [41.8, 58846.0], [41.9, 58846.0], [42.0, 58846.0], [42.1, 58846.0], [42.2, 58846.0], [42.3, 58846.0], [42.4, 58846.0], [42.5, 58846.0], [42.6, 58846.0], [42.7, 58846.0], [42.8, 58846.0], [42.9, 58846.0], [43.0, 58846.0], [43.1, 58846.0], [43.2, 58846.0], [43.3, 58846.0], [43.4, 58846.0], [43.5, 58846.0], [43.6, 58847.0], [43.7, 58847.0], [43.8, 58847.0], [43.9, 58847.0], [44.0, 58847.0], [44.1, 58847.0], [44.2, 58847.0], [44.3, 58847.0], [44.4, 58847.0], [44.5, 58847.0], [44.6, 58847.0], [44.7, 58847.0], [44.8, 58847.0], [44.9, 58847.0], [45.0, 58847.0], [45.1, 58847.0], [45.2, 58847.0], [45.3, 58847.0], [45.4, 58847.0], [45.5, 58847.0], [45.6, 58847.0], [45.7, 58847.0], [45.8, 58847.0], [45.9, 58847.0], [46.0, 58847.0], [46.1, 58847.0], [46.2, 58847.0], [46.3, 58847.0], [46.4, 58847.0], [46.5, 58847.0], [46.6, 58847.0], [46.7, 58848.0], [46.8, 58848.0], [46.9, 58848.0], [47.0, 58848.0], [47.1, 58848.0], [47.2, 58848.0], [47.3, 58848.0], [47.4, 58848.0], [47.5, 58848.0], [47.6, 58848.0], [47.7, 58848.0], [47.8, 58848.0], [47.9, 58848.0], [48.0, 58848.0], [48.1, 58848.0], [48.2, 58848.0], [48.3, 58848.0], [48.4, 58848.0], [48.5, 58848.0], [48.6, 58848.0], [48.7, 58848.0], [48.8, 58848.0], [48.9, 58848.0], [49.0, 58848.0], [49.1, 58848.0], [49.2, 58848.0], [49.3, 58849.0], [49.4, 58849.0], [49.5, 58849.0], [49.6, 58849.0], [49.7, 58849.0], [49.8, 58849.0], [49.9, 58849.0], [50.0, 58849.0], [50.1, 58849.0], [50.2, 58849.0], [50.3, 58849.0], [50.4, 58849.0], [50.5, 58849.0], [50.6, 58849.0], [50.7, 58849.0], [50.8, 58849.0], [50.9, 58849.0], [51.0, 58849.0], [51.1, 58849.0], [51.2, 58849.0], [51.3, 58849.0], [51.4, 58849.0], [51.5, 58849.0], [51.6, 58849.0], [51.7, 58849.0], [51.8, 58849.0], [51.9, 58849.0], [52.0, 58849.0], [52.1, 58849.0], [52.2, 58849.0], [52.3, 58849.0], [52.4, 58849.0], [52.5, 58850.0], [52.6, 58850.0], [52.7, 58850.0], [52.8, 58850.0], [52.9, 58850.0], [53.0, 58850.0], [53.1, 58850.0], [53.2, 58850.0], [53.3, 58850.0], [53.4, 58850.0], [53.5, 58850.0], [53.6, 58850.0], [53.7, 58850.0], [53.8, 58850.0], [53.9, 58850.0], [54.0, 58850.0], [54.1, 58850.0], [54.2, 58850.0], [54.3, 58850.0], [54.4, 58850.0], [54.5, 58850.0], [54.6, 58850.0], [54.7, 58850.0], [54.8, 58850.0], [54.9, 58851.0], [55.0, 58851.0], [55.1, 58851.0], [55.2, 58851.0], [55.3, 58851.0], [55.4, 58851.0], [55.5, 58851.0], [55.6, 58851.0], [55.7, 58851.0], [55.8, 58851.0], [55.9, 58851.0], [56.0, 58851.0], [56.1, 58851.0], [56.2, 58851.0], [56.3, 58851.0], [56.4, 58851.0], [56.5, 58851.0], [56.6, 58851.0], [56.7, 58851.0], [56.8, 58851.0], [56.9, 58851.0], [57.0, 58852.0], [57.1, 58852.0], [57.2, 58852.0], [57.3, 58852.0], [57.4, 58852.0], [57.5, 58852.0], [57.6, 58852.0], [57.7, 58852.0], [57.8, 58852.0], [57.9, 58852.0], [58.0, 58852.0], [58.1, 58852.0], [58.2, 58852.0], [58.3, 58852.0], [58.4, 58852.0], [58.5, 58853.0], [58.6, 58853.0], [58.7, 58853.0], [58.8, 58853.0], [58.9, 58853.0], [59.0, 58853.0], [59.1, 58853.0], [59.2, 58853.0], [59.3, 58853.0], [59.4, 58853.0], [59.5, 58853.0], [59.6, 58853.0], [59.7, 58853.0], [59.8, 58853.0], [59.9, 58853.0], [60.0, 58853.0], [60.1, 58853.0], [60.2, 58853.0], [60.3, 58853.0], [60.4, 58854.0], [60.5, 58854.0], [60.6, 58854.0], [60.7, 58854.0], [60.8, 58854.0], [60.9, 58854.0], [61.0, 58854.0], [61.1, 58854.0], [61.2, 58854.0], [61.3, 58854.0], [61.4, 58854.0], [61.5, 58854.0], [61.6, 58854.0], [61.7, 58854.0], [61.8, 58854.0], [61.9, 58854.0], [62.0, 58854.0], [62.1, 58854.0], [62.2, 58854.0], [62.3, 58854.0], [62.4, 58854.0], [62.5, 58854.0], [62.6, 58854.0], [62.7, 58854.0], [62.8, 58855.0], [62.9, 58855.0], [63.0, 58855.0], [63.1, 58855.0], [63.2, 58855.0], [63.3, 58855.0], [63.4, 58855.0], [63.5, 58855.0], [63.6, 58855.0], [63.7, 58855.0], [63.8, 58855.0], [63.9, 58855.0], [64.0, 58855.0], [64.1, 58855.0], [64.2, 58856.0], [64.3, 58856.0], [64.4, 58856.0], [64.5, 58856.0], [64.6, 58856.0], [64.7, 58856.0], [64.8, 58856.0], [64.9, 58856.0], [65.0, 58856.0], [65.1, 58856.0], [65.2, 58856.0], [65.3, 58856.0], [65.4, 58856.0], [65.5, 58856.0], [65.6, 58856.0], [65.7, 58856.0], [65.8, 58856.0], [65.9, 58856.0], [66.0, 58856.0], [66.1, 58856.0], [66.2, 58856.0], [66.3, 58856.0], [66.4, 58856.0], [66.5, 58856.0], [66.6, 58856.0], [66.7, 58856.0], [66.8, 58856.0], [66.9, 58856.0], [67.0, 58856.0], [67.1, 58857.0], [67.2, 58857.0], [67.3, 58857.0], [67.4, 58857.0], [67.5, 58857.0], [67.6, 58857.0], [67.7, 58857.0], [67.8, 58857.0], [67.9, 58857.0], [68.0, 58857.0], [68.1, 58857.0], [68.2, 58857.0], [68.3, 58857.0], [68.4, 58857.0], [68.5, 58857.0], [68.6, 58858.0], [68.7, 58858.0], [68.8, 58858.0], [68.9, 58858.0], [69.0, 58858.0], [69.1, 58858.0], [69.2, 58858.0], [69.3, 58858.0], [69.4, 58858.0], [69.5, 58858.0], [69.6, 58858.0], [69.7, 58858.0], [69.8, 58858.0], [69.9, 58858.0], [70.0, 58858.0], [70.1, 58858.0], [70.2, 58858.0], [70.3, 58858.0], [70.4, 58858.0], [70.5, 58858.0], [70.6, 58858.0], [70.7, 58859.0], [70.8, 58859.0], [70.9, 58859.0], [71.0, 58859.0], [71.1, 58859.0], [71.2, 58859.0], [71.3, 58859.0], [71.4, 58859.0], [71.5, 58859.0], [71.6, 58859.0], [71.7, 58859.0], [71.8, 58859.0], [71.9, 58859.0], [72.0, 58859.0], [72.1, 58859.0], [72.2, 58859.0], [72.3, 58859.0], [72.4, 58859.0], [72.5, 58859.0], [72.6, 58859.0], [72.7, 58859.0], [72.8, 58859.0], [72.9, 58860.0], [73.0, 58860.0], [73.1, 58860.0], [73.2, 58860.0], [73.3, 58860.0], [73.4, 58860.0], [73.5, 58860.0], [73.6, 58860.0], [73.7, 58860.0], [73.8, 58860.0], [73.9, 58860.0], [74.0, 58860.0], [74.1, 58860.0], [74.2, 58860.0], [74.3, 58860.0], [74.4, 58860.0], [74.5, 58860.0], [74.6, 58860.0], [74.7, 58860.0], [74.8, 58861.0], [74.9, 58861.0], [75.0, 58861.0], [75.1, 58861.0], [75.2, 58861.0], [75.3, 58861.0], [75.4, 58861.0], [75.5, 58861.0], [75.6, 58861.0], [75.7, 58861.0], [75.8, 58861.0], [75.9, 58861.0], [76.0, 58862.0], [76.1, 58862.0], [76.2, 58862.0], [76.3, 58862.0], [76.4, 58862.0], [76.5, 58863.0], [76.6, 58863.0], [76.7, 58863.0], [76.8, 58863.0], [76.9, 58863.0], [77.0, 58863.0], [77.1, 58863.0], [77.2, 58863.0], [77.3, 58863.0], [77.4, 58863.0], [77.5, 58863.0], [77.6, 58863.0], [77.7, 58863.0], [77.8, 58863.0], [77.9, 58863.0], [78.0, 58863.0], [78.1, 58863.0], [78.2, 58864.0], [78.3, 58864.0], [78.4, 58864.0], [78.5, 58864.0], [78.6, 58864.0], [78.7, 58864.0], [78.8, 58864.0], [78.9, 58864.0], [79.0, 58864.0], [79.1, 58865.0], [79.2, 58865.0], [79.3, 58865.0], [79.4, 58865.0], [79.5, 58865.0], [79.6, 58866.0], [79.7, 58866.0], [79.8, 58866.0], [79.9, 58866.0], [80.0, 58866.0], [80.1, 58866.0], [80.2, 58866.0], [80.3, 58867.0], [80.4, 58867.0], [80.5, 58867.0], [80.6, 58867.0], [80.7, 58867.0], [80.8, 58867.0], [80.9, 58867.0], [81.0, 58867.0], [81.1, 58867.0], [81.2, 58867.0], [81.3, 58867.0], [81.4, 58867.0], [81.5, 58867.0], [81.6, 58867.0], [81.7, 58867.0], [81.8, 58868.0], [81.9, 58868.0], [82.0, 58868.0], [82.1, 58868.0], [82.2, 58868.0], [82.3, 58868.0], [82.4, 58868.0], [82.5, 58868.0], [82.6, 58868.0], [82.7, 58868.0], [82.8, 58868.0], [82.9, 58868.0], [83.0, 58868.0], [83.1, 58868.0], [83.2, 58869.0], [83.3, 58869.0], [83.4, 58869.0], [83.5, 58869.0], [83.6, 58869.0], [83.7, 58869.0], [83.8, 58869.0], [83.9, 58869.0], [84.0, 58869.0], [84.1, 58869.0], [84.2, 58870.0], [84.3, 58870.0], [84.4, 58870.0], [84.5, 58870.0], [84.6, 58870.0], [84.7, 58870.0], [84.8, 58870.0], [84.9, 58870.0], [85.0, 58870.0], [85.1, 58871.0], [85.2, 58871.0], [85.3, 58871.0], [85.4, 58872.0], [85.5, 58872.0], [85.6, 58872.0], [85.7, 58872.0], [85.8, 58872.0], [85.9, 58872.0], [86.0, 58872.0], [86.1, 58872.0], [86.2, 58872.0], [86.3, 58873.0], [86.4, 58873.0], [86.5, 58873.0], [86.6, 58873.0], [86.7, 58873.0], [86.8, 58874.0], [86.9, 58874.0], [87.0, 58874.0], [87.1, 58874.0], [87.2, 58874.0], [87.3, 58875.0], [87.4, 58875.0], [87.5, 58875.0], [87.6, 58875.0], [87.7, 58875.0], [87.8, 58875.0], [87.9, 58875.0], [88.0, 58877.0], [88.1, 58877.0], [88.2, 58877.0], [88.3, 58877.0], [88.4, 58877.0], [88.5, 58878.0], [88.6, 58878.0], [88.7, 58878.0], [88.8, 58878.0], [88.9, 58878.0], [89.0, 58878.0], [89.1, 58878.0], [89.2, 58879.0], [89.3, 58879.0], [89.4, 58879.0], [89.5, 58880.0], [89.6, 58880.0], [89.7, 58880.0], [89.8, 58880.0], [89.9, 58880.0], [90.0, 58880.0], [90.1, 58880.0], [90.2, 58881.0], [90.3, 58881.0], [90.4, 58881.0], [90.5, 58881.0], [90.6, 58881.0], [90.7, 58882.0], [90.8, 58882.0], [90.9, 58882.0], [91.0, 58882.0], [91.1, 58882.0], [91.2, 58882.0], [91.3, 58882.0], [91.4, 58882.0], [91.5, 58882.0], [91.6, 58883.0], [91.7, 58883.0], [91.8, 58883.0], [91.9, 58885.0], [92.0, 58885.0], [92.1, 58885.0], [92.2, 58885.0], [92.3, 58885.0], [92.4, 58886.0], [92.5, 58886.0], [92.6, 58886.0], [92.7, 58886.0], [92.8, 58887.0], [92.9, 58887.0], [93.0, 58887.0], [93.1, 58888.0], [93.2, 58888.0], [93.3, 58888.0], [93.4, 58888.0], [93.5, 58888.0], [93.6, 58888.0], [93.7, 58888.0], [93.8, 58891.0], [93.9, 58891.0], [94.0, 58891.0], [94.1, 58891.0], [94.2, 58891.0], [94.3, 58891.0], [94.4, 58891.0], [94.5, 58892.0], [94.6, 58892.0], [94.7, 58892.0], [94.8, 58894.0], [94.9, 58894.0], [95.0, 58894.0], [95.1, 58894.0], [95.2, 58894.0], [95.3, 58894.0], [95.4, 58894.0], [95.5, 58895.0], [95.6, 58895.0], [95.7, 58902.0], [95.8, 58902.0], [95.9, 58902.0], [96.0, 58902.0], [96.1, 58902.0], [96.2, 58911.0], [96.3, 58911.0], [96.4, 58912.0], [96.5, 58912.0], [96.6, 58912.0], [96.7, 58914.0], [96.8, 58914.0], [96.9, 58955.0], [97.0, 58955.0], [97.1, 58955.0], [97.2, 58987.0], [97.3, 58987.0], [97.4, 58989.0], [97.5, 58989.0], [97.6, 58997.0], [97.7, 58997.0], [97.8, 58997.0], [97.9, 59006.0], [98.0, 59006.0], [98.1, 59109.0], [98.2, 59109.0], [98.3, 59109.0], [98.4, 59665.0], [98.5, 59665.0], [98.6, 59690.0], [98.7, 59690.0], [98.8, 59699.0], [98.9, 59699.0], [99.0, 59699.0], [99.1, 60112.0], [99.2, 60112.0], [99.3, 60132.0], [99.4, 60132.0], [99.5, 60132.0], [99.6, 60194.0], [99.7, 60194.0], [99.8, 60406.0], [99.9, 60406.0]], "isOverall": false, "label": "POST Create reservation", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6500.0, "maxY": 389.0, "series": [{"data": [[36400.0, 1.0], [42300.0, 1.0], [12700.0, 1.0], [49200.0, 1.0], [55200.0, 1.0], [58800.0, 389.0], [58900.0, 9.0], [59100.0, 1.0], [59000.0, 1.0], [59600.0, 3.0], [60100.0, 3.0], [60400.0, 1.0], [18600.0, 1.0], [24600.0, 1.0], [6500.0, 1.0], [30500.0, 1.0]], "isOverall": false, "label": "POST Create reservation", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 407.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 407.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.5524897E12, "maxY": 354.0, "series": [{"data": [[1.552489718E12, 148.0], [1.552489761E12, 353.5], [1.552489804E12, 105.0], [1.552489763E12, 354.0], [1.552489806E12, 93.5], [1.552489765E12, 340.59999999999997], [1.552489808E12, 81.5], [1.552489724E12, 184.0], [1.552489767E12, 326.5], [1.55248981E12, 69.5], [1.552489769E12, 315.5], [1.552489812E12, 57.5], [1.552489794E12, 165.5], [1.552489753E12, 353.0], [1.552489796E12, 153.5], [1.552489712E12, 112.0], [1.552489755E12, 353.16666666666663], [1.552489798E12, 141.0], [1.552489757E12, 353.16666666666663], [1.5524898E12, 129.5], [1.552489759E12, 353.1666666666667], [1.552489802E12, 117.5], [1.552489782E12, 237.0], [1.552489784E12, 225.5], [1.5524897E12, 41.0], [1.552489786E12, 213.5], [1.552489788E12, 201.5], [1.55248979E12, 189.5], [1.552489706E12, 78.0], [1.552489792E12, 177.5], [1.552489772E12, 297.5], [1.552489815E12, 39.5], [1.552489774E12, 285.5], [1.552489817E12, 27.5], [1.552489776E12, 273.5], [1.552489819E12, 14.5], [1.552489778E12, 261.5], [1.552489821E12, 4.0], [1.55248978E12, 249.5], [1.552489823E12, 1.0], [1.552489803E12, 111.0], [1.552489762E12, 353.4], [1.552489805E12, 99.5], [1.552489764E12, 348.0], [1.552489807E12, 87.5], [1.552489766E12, 332.5], [1.552489809E12, 75.5], [1.552489768E12, 321.0], [1.552489811E12, 63.5], [1.55248977E12, 309.5], [1.552489813E12, 52.0], [1.55248975E12, 332.0], [1.552489793E12, 171.5], [1.552489795E12, 159.5], [1.552489754E12, 353.0], [1.552489797E12, 147.5], [1.552489756E12, 353.0], [1.552489799E12, 135.0], [1.552489758E12, 353.16666666666663], [1.552489801E12, 123.5], [1.55248976E12, 353.6666666666667], [1.552489783E12, 231.0], [1.552489785E12, 219.5], [1.552489744E12, 296.0], [1.552489787E12, 207.5], [1.552489789E12, 195.5], [1.552489791E12, 183.5], [1.552489771E12, 303.5], [1.552489814E12, 46.0], [1.55248973E12, 219.0], [1.552489773E12, 291.5], [1.552489816E12, 33.5], [1.552489775E12, 279.5], [1.552489818E12, 21.0], [1.552489777E12, 267.5], [1.55248982E12, 9.0], [1.552489736E12, 254.0], [1.552489779E12, 255.5], [1.552489781E12, 243.5]], "isOverall": false, "label": "Create reservation", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.552489823E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 32712.0, "minX": 1.0, "maxY": 60406.0, "series": [{"data": [[2.0, 58861.0], [3.0, 58858.0], [4.0, 58844.0], [5.0, 58847.0], [6.0, 58850.0], [7.0, 58837.0], [8.0, 58854.0], [9.0, 58863.0], [10.0, 58894.0], [11.0, 58894.0], [12.0, 58894.0], [13.0, 58852.0], [14.0, 58842.0], [15.0, 58841.0], [16.0, 58843.0], [17.0, 58867.0], [18.0, 58837.0], [19.0, 58839.0], [20.0, 58855.0], [21.0, 58852.0], [22.0, 58989.0], [23.0, 59006.0], [24.0, 58873.0], [25.0, 58856.0], [26.0, 58873.0], [27.0, 58859.0], [28.0, 58849.0], [29.0, 58870.0], [30.0, 58886.0], [31.0, 58858.0], [33.0, 58859.0], [32.0, 58867.0], [35.0, 58857.0], [34.0, 58848.0], [37.0, 58850.0], [36.0, 58856.0], [39.0, 58892.0], [38.0, 58856.0], [41.0, 32712.0], [40.0, 58870.0], [43.0, 58847.0], [42.0, 58849.0], [45.0, 58859.0], [44.0, 58850.0], [47.0, 58849.0], [46.0, 58863.0], [49.0, 58891.0], [48.0, 58841.0], [51.0, 58852.0], [50.0, 58840.0], [53.0, 58847.0], [52.0, 58856.0], [55.0, 58847.0], [54.0, 58845.0], [57.0, 58869.0], [56.0, 58880.0], [59.0, 58864.0], [58.0, 58888.0], [61.0, 58845.0], [60.0, 58854.0], [63.0, 58841.0], [62.0, 58868.0], [67.0, 58837.0], [66.0, 58850.0], [65.0, 58835.0], [64.0, 58866.0], [71.0, 58835.0], [70.0, 58845.0], [69.0, 58867.0], [68.0, 58846.0], [75.0, 58846.0], [74.0, 58842.0], [73.0, 58874.0], [72.0, 58857.0], [78.0, 35777.0], [79.0, 58860.0], [77.0, 58902.0], [76.0, 58848.0], [83.0, 58844.0], [82.0, 58856.0], [81.0, 58851.0], [80.0, 58861.0], [87.0, 58841.0], [86.0, 58843.0], [85.0, 58843.0], [84.0, 58854.0], [91.0, 58865.0], [90.0, 58886.0], [89.0, 58839.0], [88.0, 58841.0], [95.0, 58850.0], [94.0, 58891.0], [93.0, 58888.0], [92.0, 58853.0], [99.0, 58835.0], [98.0, 58843.0], [97.0, 58849.0], [96.0, 58852.0], [103.0, 58860.0], [102.0, 58843.0], [101.0, 58869.0], [100.0, 58847.0], [107.0, 58841.0], [106.0, 58850.0], [105.0, 58847.0], [104.0, 58845.0], [111.0, 58868.0], [110.0, 58845.0], [109.0, 58867.0], [108.0, 58872.0], [112.0, 38772.5], [115.0, 58891.0], [114.0, 58875.0], [113.0, 58842.0], [119.0, 58849.0], [118.0, 58840.0], [117.0, 58843.0], [116.0, 58914.0], [123.0, 58846.0], [122.0, 58859.0], [121.0, 58856.0], [120.0, 58987.0], [127.0, 58844.0], [126.0, 58842.0], [125.0, 58848.0], [124.0, 58844.0], [135.0, 58842.0], [134.0, 58863.0], [133.0, 58835.0], [132.0, 58843.0], [131.0, 58844.0], [130.0, 58858.0], [129.0, 58872.0], [128.0, 58841.0], [143.0, 58846.0], [142.0, 58855.0], [141.0, 58835.0], [140.0, 58860.0], [139.0, 58843.0], [138.0, 58863.0], [137.0, 58843.0], [136.0, 58843.0], [148.0, 41782.0], [151.0, 58842.0], [150.0, 58874.0], [149.0, 58859.0], [147.0, 58845.0], [146.0, 58866.0], [145.0, 58842.0], [144.0, 58850.0], [159.0, 58869.0], [158.0, 58863.0], [157.0, 58863.0], [156.0, 58853.0], [155.0, 58845.0], [154.0, 58842.0], [153.0, 58839.0], [152.0, 58838.0], [167.0, 58831.0], [166.0, 58839.0], [165.0, 58861.0], [164.0, 58872.0], [163.0, 58854.0], [162.0, 58859.0], [161.0, 58839.0], [160.0, 58839.0], [175.0, 58882.0], [174.0, 58847.0], [173.0, 58860.0], [172.0, 58852.0], [171.0, 58853.0], [170.0, 58839.0], [169.0, 58839.0], [168.0, 58847.0], [183.0, 58844.0], [182.0, 58842.0], [181.0, 58853.0], [180.0, 58862.0], [179.0, 58846.0], [178.0, 58877.0], [177.0, 58912.0], [176.0, 58864.0], [184.0, 44697.5], [191.0, 58844.0], [190.0, 58835.0], [189.0, 58867.0], [188.0, 58846.0], [187.0, 58856.0], [186.0, 58843.0], [185.0, 58845.0], [199.0, 58848.0], [198.0, 58845.0], [197.0, 58855.0], [196.0, 58851.0], [195.0, 58870.0], [194.0, 58869.0], [193.0, 58851.0], [192.0, 58833.0], [207.0, 58846.0], [206.0, 58860.0], [205.0, 58848.0], [204.0, 58835.0], [203.0, 58847.0], [202.0, 58843.0], [201.0, 58834.0], [200.0, 58843.0], [215.0, 58838.0], [214.0, 58882.0], [213.0, 58911.0], [212.0, 58902.0], [211.0, 58888.0], [210.0, 58854.0], [209.0, 58842.0], [208.0, 58840.0], [219.0, 47668.5], [223.0, 58838.0], [222.0, 58841.0], [221.0, 58850.0], [220.0, 58849.0], [218.0, 58878.0], [217.0, 58845.0], [216.0, 58855.0], [231.0, 58837.0], [230.0, 58834.0], [229.0, 58835.0], [228.0, 58840.0], [227.0, 58877.0], [226.0, 58841.0], [225.0, 58843.0], [224.0, 58843.0], [239.0, 58866.0], [238.0, 58859.0], [237.0, 58858.0], [236.0, 58845.0], [235.0, 58844.0], [234.0, 58844.0], [233.0, 58834.0], [232.0, 58839.0], [247.0, 58842.0], [246.0, 58856.0], [245.0, 58844.0], [244.0, 58851.0], [243.0, 58858.0], [242.0, 58861.0], [241.0, 58837.0], [240.0, 58842.0], [254.0, 50615.5], [255.0, 58843.0], [253.0, 58854.0], [252.0, 58860.0], [251.0, 58835.0], [250.0, 58845.0], [249.0, 58852.0], [248.0, 58845.0], [270.0, 58839.0], [271.0, 58844.0], [269.0, 58859.0], [268.0, 58838.0], [267.0, 58853.0], [266.0, 58854.0], [265.0, 58865.0], [264.0, 58838.0], [263.0, 58860.0], [257.0, 58837.0], [256.0, 58837.0], [259.0, 58842.0], [258.0, 58850.0], [262.0, 58868.0], [261.0, 58856.0], [260.0, 58858.0], [286.0, 58845.0], [287.0, 58857.0], [285.0, 58871.0], [284.0, 58840.0], [283.0, 58881.0], [282.0, 58864.0], [281.0, 58870.0], [280.0, 58853.0], [279.0, 58875.0], [273.0, 58868.0], [272.0, 58835.0], [275.0, 58844.0], [274.0, 58838.0], [278.0, 58840.0], [277.0, 58849.0], [276.0, 58838.0], [303.0, 58839.0], [296.0, 54058.0], [302.0, 58883.0], [301.0, 58845.0], [300.0, 58849.0], [291.0, 58834.0], [290.0, 58882.0], [289.0, 58880.0], [288.0, 58837.0], [299.0, 58848.0], [298.0, 58840.0], [297.0, 58851.0], [295.0, 58851.0], [294.0, 58835.0], [293.0, 58847.0], [292.0, 58839.0], [318.0, 58846.0], [319.0, 58841.0], [317.0, 58841.0], [316.0, 58844.0], [315.0, 58854.0], [314.0, 58847.0], [313.0, 58843.0], [312.0, 58875.0], [311.0, 58848.0], [305.0, 58847.0], [304.0, 58840.0], [307.0, 58864.0], [306.0, 58844.0], [310.0, 58832.0], [309.0, 58861.0], [308.0, 58843.0], [334.0, 58837.0], [332.0, 57036.0], [335.0, 58843.0], [333.0, 58846.0], [331.0, 58848.0], [330.0, 58878.0], [329.0, 58856.0], [328.0, 58848.0], [327.0, 58855.0], [321.0, 58853.0], [320.0, 58841.0], [323.0, 58857.0], [322.0, 58842.0], [326.0, 58839.0], [325.0, 58853.0], [324.0, 58842.0], [349.0, 59690.0], [350.0, 59109.0], [348.0, 58862.0], [339.0, 58843.0], [338.0, 60406.0], [337.0, 60112.0], [336.0, 58840.0], [347.0, 59665.0], [346.0, 58863.0], [345.0, 58839.0], [344.0, 59946.5], [342.0, 58845.0], [341.0, 58855.0], [340.0, 58839.0], [353.0, 58851.85365853659], [354.0, 58866.68749999999], [1.0, 60132.0]], "isOverall": false, "label": "POST Create reservation", "isController": false}, {"data": [[200.0649038461537, 58265.64903846155]], "isOverall": false, "label": "POST Create reservation-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 354.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 414.0, "minX": 1.5524897E12, "maxY": 1234930.0, "series": [{"data": [[1.552489718E12, 414.0], [1.552489761E12, 740958.0], [1.552489804E12, 617465.0], [1.552489763E12, 370479.0], [1.552489806E12, 740958.0], [1.552489765E12, 1234930.0], [1.552489808E12, 740958.0], [1.552489724E12, 414.0], [1.552489767E12, 740958.0], [1.55248981E12, 740958.0], [1.552489769E12, 740958.0], [1.552489812E12, 740958.0], [1.552489794E12, 740958.0], [1.552489753E12, 123493.0], [1.552489796E12, 740958.0], [1.552489712E12, 414.0], [1.552489755E12, 740958.0], [1.552489798E12, 864451.0], [1.552489757E12, 740958.0], [1.5524898E12, 740958.0], [1.552489759E12, 740958.0], [1.552489802E12, 740958.0], [1.552489782E12, 864451.0], [1.552489784E12, 740958.0], [1.5524897E12, 414.0], [1.552489786E12, 740958.0], [1.552489788E12, 740958.0], [1.55248979E12, 740958.0], [1.552489706E12, 414.0], [1.552489792E12, 740958.0], [1.552489772E12, 740958.0], [1.552489815E12, 740958.0], [1.552489774E12, 740958.0], [1.552489817E12, 740958.0], [1.552489776E12, 740958.0], [1.552489819E12, 740958.0], [1.552489778E12, 740958.0], [1.552489821E12, 617465.0], [1.55248978E12, 740958.0], [1.552489823E12, 123493.0], [1.552489803E12, 864451.0], [1.552489762E12, 617465.0], [1.552489805E12, 740958.0], [1.552489764E12, 617465.0], [1.552489807E12, 740958.0], [1.552489766E12, 740958.0], [1.552489809E12, 740958.0], [1.552489768E12, 617465.0], [1.552489811E12, 740958.0], [1.55248977E12, 740958.0], [1.552489813E12, 617465.0], [1.55248975E12, 414.0], [1.552489793E12, 740958.0], [1.552489795E12, 740958.0], [1.552489754E12, 740958.0], [1.552489797E12, 740958.0], [1.552489756E12, 740958.0], [1.552489799E12, 617465.0], [1.552489758E12, 740958.0], [1.552489801E12, 740958.0], [1.55248976E12, 740958.0], [1.552489783E12, 617465.0], [1.552489785E12, 740958.0], [1.552489744E12, 414.0], [1.552489787E12, 740958.0], [1.552489789E12, 740958.0], [1.552489791E12, 740958.0], [1.552489771E12, 740958.0], [1.552489814E12, 864451.0], [1.55248973E12, 414.0], [1.552489773E12, 740958.0], [1.552489816E12, 740958.0], [1.552489775E12, 740958.0], [1.552489818E12, 864451.0], [1.552489777E12, 740958.0], [1.55248982E12, 617465.0], [1.552489736E12, 414.0], [1.552489779E12, 740958.0], [1.552489781E12, 740958.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.552489718E12, 1720.0], [1.552489761E12, 10320.0], [1.552489804E12, 8600.0], [1.552489763E12, 5160.0], [1.552489806E12, 10320.0], [1.552489765E12, 17200.0], [1.552489808E12, 10320.0], [1.552489724E12, 1720.0], [1.552489767E12, 10320.0], [1.55248981E12, 10320.0], [1.552489769E12, 10320.0], [1.552489812E12, 10320.0], [1.552489794E12, 10320.0], [1.552489753E12, 1720.0], [1.552489796E12, 10320.0], [1.552489712E12, 1720.0], [1.552489755E12, 10320.0], [1.552489798E12, 12040.0], [1.552489757E12, 10320.0], [1.5524898E12, 10320.0], [1.552489759E12, 10320.0], [1.552489802E12, 10320.0], [1.552489782E12, 12040.0], [1.552489784E12, 10320.0], [1.5524897E12, 1720.0], [1.552489786E12, 10320.0], [1.552489788E12, 10320.0], [1.55248979E12, 10320.0], [1.552489706E12, 1720.0], [1.552489792E12, 10320.0], [1.552489772E12, 10320.0], [1.552489815E12, 10320.0], [1.552489774E12, 10320.0], [1.552489817E12, 10320.0], [1.552489776E12, 10320.0], [1.552489819E12, 10320.0], [1.552489778E12, 10320.0], [1.552489821E12, 8600.0], [1.55248978E12, 10320.0], [1.552489823E12, 1720.0], [1.552489803E12, 12040.0], [1.552489762E12, 8600.0], [1.552489805E12, 10320.0], [1.552489764E12, 8600.0], [1.552489807E12, 10320.0], [1.552489766E12, 10320.0], [1.552489809E12, 10320.0], [1.552489768E12, 8600.0], [1.552489811E12, 10320.0], [1.55248977E12, 10320.0], [1.552489813E12, 8600.0], [1.55248975E12, 1720.0], [1.552489793E12, 10320.0], [1.552489795E12, 10320.0], [1.552489754E12, 10320.0], [1.552489797E12, 10320.0], [1.552489756E12, 10320.0], [1.552489799E12, 8600.0], [1.552489758E12, 10320.0], [1.552489801E12, 10320.0], [1.55248976E12, 10320.0], [1.552489783E12, 8600.0], [1.552489785E12, 10320.0], [1.552489744E12, 1720.0], [1.552489787E12, 10320.0], [1.552489789E12, 10320.0], [1.552489791E12, 10320.0], [1.552489771E12, 10320.0], [1.552489814E12, 12040.0], [1.55248973E12, 1720.0], [1.552489773E12, 10320.0], [1.552489816E12, 10320.0], [1.552489775E12, 10320.0], [1.552489818E12, 12040.0], [1.552489777E12, 10320.0], [1.55248982E12, 8600.0], [1.552489736E12, 1720.0], [1.552489779E12, 10320.0], [1.552489781E12, 10320.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.552489823E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6565.0, "minX": 1.5524897E12, "maxY": 60132.0, "series": [{"data": [[1.552489718E12, 24682.0], [1.552489761E12, 58865.333333333336], [1.552489804E12, 58848.6], [1.552489763E12, 58928.666666666664], [1.552489806E12, 58866.5], [1.552489765E12, 59347.200000000004], [1.552489808E12, 58854.33333333333], [1.552489724E12, 30541.0], [1.552489767E12, 58848.83333333333], [1.55248981E12, 58847.833333333336], [1.552489769E12, 58845.833333333336], [1.552489812E12, 58867.0], [1.552489794E12, 58850.666666666664], [1.552489753E12, 58841.0], [1.552489796E12, 58843.16666666667], [1.552489712E12, 18696.0], [1.552489755E12, 58846.33333333333], [1.552489798E12, 58850.28571428571], [1.552489757E12, 58846.333333333336], [1.5524898E12, 58850.33333333333], [1.552489759E12, 58840.83333333333], [1.552489802E12, 58887.33333333333], [1.552489782E12, 58851.14285714286], [1.552489784E12, 58847.0], [1.5524897E12, 6565.0], [1.552489786E12, 58879.33333333333], [1.552489788E12, 58841.66666666667], [1.55248979E12, 58846.833333333336], [1.552489706E12, 12711.0], [1.552489792E12, 58873.83333333333], [1.552489772E12, 58847.0], [1.552489815E12, 58862.666666666664], [1.552489774E12, 58855.166666666664], [1.552489817E12, 58865.5], [1.552489776E12, 58844.5], [1.552489819E12, 58856.5], [1.552489778E12, 58853.666666666664], [1.552489821E12, 58852.0], [1.55248978E12, 58846.5], [1.552489823E12, 60132.0], [1.552489803E12, 58859.71428571429], [1.552489762E12, 58854.2], [1.552489805E12, 58847.66666666667], [1.552489764E12, 59237.8], [1.552489807E12, 58848.833333333336], [1.552489766E12, 58849.83333333333], [1.552489809E12, 58859.166666666664], [1.552489768E12, 58846.8], [1.552489811E12, 58850.833333333336], [1.55248977E12, 58853.833333333336], [1.552489813E12, 58848.0], [1.55248975E12, 55225.0], [1.552489793E12, 58848.33333333333], [1.552489795E12, 58855.333333333336], [1.552489754E12, 58862.33333333333], [1.552489797E12, 58861.33333333333], [1.552489756E12, 58851.833333333336], [1.552489799E12, 58845.2], [1.552489758E12, 58850.33333333333], [1.552489801E12, 58849.16666666667], [1.55248976E12, 58852.5], [1.552489783E12, 58835.8], [1.552489785E12, 58855.166666666664], [1.552489744E12, 49273.0], [1.552489787E12, 58848.333333333336], [1.552489789E12, 58856.833333333336], [1.552489791E12, 58846.83333333333], [1.552489771E12, 58849.666666666664], [1.552489814E12, 58857.142857142855], [1.55248973E12, 36469.0], [1.552489773E12, 58852.833333333336], [1.552489816E12, 58857.5], [1.552489775E12, 58858.5], [1.552489818E12, 58893.0], [1.552489777E12, 58851.33333333333], [1.55248982E12, 58868.4], [1.552489736E12, 42352.0], [1.552489779E12, 58850.0], [1.552489781E12, 58851.166666666664]], "isOverall": false, "label": "POST Create reservation", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.552489823E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6565.0, "minX": 1.5524897E12, "maxY": 59567.0, "series": [{"data": [[1.552489718E12, 24682.0], [1.552489761E12, 58284.5], [1.552489804E12, 58284.4], [1.552489763E12, 58283.666666666664], [1.552489806E12, 58289.66666666667], [1.552489765E12, 58341.7], [1.552489808E12, 58287.833333333336], [1.552489724E12, 30540.0], [1.552489767E12, 58284.16666666667], [1.55248981E12, 58284.16666666667], [1.552489769E12, 58284.166666666664], [1.552489812E12, 58289.5], [1.552489794E12, 58287.166666666664], [1.552489753E12, 58286.0], [1.552489796E12, 58285.5], [1.552489712E12, 18696.0], [1.552489755E12, 58303.33333333333], [1.552489798E12, 58287.57142857143], [1.552489757E12, 58282.83333333333], [1.5524898E12, 58280.66666666667], [1.552489759E12, 58283.0], [1.552489802E12, 58284.16666666667], [1.552489782E12, 58286.57142857143], [1.552489784E12, 58288.666666666664], [1.5524897E12, 6565.0], [1.552489786E12, 58286.0], [1.552489788E12, 58281.5], [1.55248979E12, 58283.5], [1.552489706E12, 12711.0], [1.552489792E12, 58288.33333333333], [1.552489772E12, 58281.0], [1.552489815E12, 58285.833333333336], [1.552489774E12, 58287.0], [1.552489817E12, 58290.166666666664], [1.552489776E12, 58286.0], [1.552489819E12, 58283.666666666664], [1.552489778E12, 58284.166666666664], [1.552489821E12, 58283.4], [1.55248978E12, 58286.66666666667], [1.552489823E12, 59567.0], [1.552489803E12, 58295.857142857145], [1.552489762E12, 58282.6], [1.552489805E12, 58284.33333333333], [1.552489764E12, 58291.0], [1.552489807E12, 58282.333333333336], [1.552489766E12, 58283.33333333333], [1.552489809E12, 58292.333333333336], [1.552489768E12, 58284.4], [1.552489811E12, 58283.16666666667], [1.55248977E12, 58289.0], [1.552489813E12, 58286.4], [1.55248975E12, 55224.0], [1.552489793E12, 58285.83333333333], [1.552489795E12, 58281.5], [1.552489754E12, 58299.33333333333], [1.552489797E12, 58287.333333333336], [1.552489756E12, 58287.666666666664], [1.552489799E12, 58281.2], [1.552489758E12, 58292.166666666664], [1.552489801E12, 58283.0], [1.55248976E12, 58298.16666666667], [1.552489783E12, 58281.8], [1.552489785E12, 58284.66666666667], [1.552489744E12, 49273.0], [1.552489787E12, 58284.66666666667], [1.552489789E12, 58285.0], [1.552489791E12, 58282.83333333333], [1.552489771E12, 58289.0], [1.552489814E12, 58285.0], [1.55248973E12, 36469.0], [1.552489773E12, 58281.66666666667], [1.552489816E12, 58283.666666666664], [1.552489775E12, 58287.0], [1.552489818E12, 58323.57142857143], [1.552489777E12, 58281.5], [1.55248982E12, 58292.4], [1.552489736E12, 42352.0], [1.552489779E12, 58280.5], [1.552489781E12, 58282.0]], "isOverall": false, "label": "POST Create reservation", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.552489823E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 136.0, "minX": 1.5524897E12, "maxY": 1423.0, "series": [{"data": [[1.552489718E12, 138.0], [1.552489761E12, 140.33333333333331], [1.552489804E12, 139.2], [1.552489763E12, 138.66666666666666], [1.552489806E12, 140.0], [1.552489765E12, 138.9], [1.552489808E12, 142.33333333333334], [1.552489724E12, 145.0], [1.552489767E12, 140.83333333333334], [1.55248981E12, 137.83333333333331], [1.552489769E12, 139.0], [1.552489812E12, 141.33333333333334], [1.552489794E12, 142.83333333333334], [1.552489753E12, 139.0], [1.552489796E12, 139.16666666666669], [1.552489712E12, 138.0], [1.552489755E12, 138.5], [1.552489798E12, 141.42857142857142], [1.552489757E12, 138.5], [1.5524898E12, 137.33333333333334], [1.552489759E12, 138.16666666666666], [1.552489802E12, 139.66666666666666], [1.552489782E12, 140.57142857142858], [1.552489784E12, 142.5], [1.5524897E12, 166.0], [1.552489786E12, 141.5], [1.552489788E12, 138.16666666666666], [1.55248979E12, 137.16666666666666], [1.552489706E12, 136.0], [1.552489792E12, 138.16666666666666], [1.552489772E12, 138.66666666666666], [1.552489815E12, 140.0], [1.552489774E12, 139.0], [1.552489817E12, 141.16666666666666], [1.552489776E12, 138.0], [1.552489819E12, 137.66666666666666], [1.552489778E12, 138.0], [1.552489821E12, 138.6], [1.55248978E12, 140.0], [1.552489823E12, 1423.0], [1.552489803E12, 139.14285714285714], [1.552489762E12, 139.0], [1.552489805E12, 138.5], [1.552489764E12, 140.0], [1.552489807E12, 138.83333333333331], [1.552489766E12, 138.33333333333334], [1.552489809E12, 149.5], [1.552489768E12, 139.0], [1.552489811E12, 138.5], [1.55248977E12, 138.83333333333331], [1.552489813E12, 140.8], [1.55248975E12, 137.0], [1.552489793E12, 138.5], [1.552489795E12, 138.5], [1.552489754E12, 149.16666666666666], [1.552489797E12, 138.33333333333334], [1.552489756E12, 138.16666666666669], [1.552489799E12, 138.0], [1.552489758E12, 139.83333333333331], [1.552489801E12, 138.66666666666666], [1.55248976E12, 138.33333333333334], [1.552489783E12, 138.0], [1.552489785E12, 138.5], [1.552489744E12, 143.0], [1.552489787E12, 138.5], [1.552489789E12, 140.16666666666666], [1.552489791E12, 138.33333333333334], [1.552489771E12, 141.66666666666669], [1.552489814E12, 138.71428571428572], [1.55248973E12, 144.0], [1.552489773E12, 138.33333333333334], [1.552489816E12, 140.5], [1.552489775E12, 138.33333333333334], [1.552489818E12, 160.2857142857143], [1.552489777E12, 138.16666666666666], [1.55248982E12, 141.4], [1.552489736E12, 136.0], [1.552489779E12, 137.16666666666666], [1.552489781E12, 137.83333333333334]], "isOverall": false, "label": "POST Create reservation", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.552489823E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6565.0, "minX": 1.5524897E12, "maxY": 55225.0, "series": [{"data": [[1.552489718E12, 24682.0], [1.55248975E12, 55225.0], [1.55248973E12, 36469.0], [1.5524897E12, 6565.0], [1.552489712E12, 18696.0], [1.552489744E12, 49273.0], [1.552489724E12, 30541.0], [1.552489736E12, 42352.0], [1.552489706E12, 12711.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.552489718E12, 24682.0], [1.55248975E12, 55225.0], [1.55248973E12, 36469.0], [1.5524897E12, 6565.0], [1.552489712E12, 18696.0], [1.552489744E12, 49273.0], [1.552489724E12, 30541.0], [1.552489736E12, 42352.0], [1.552489706E12, 12711.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.552489718E12, 24682.0], [1.55248975E12, 55225.0], [1.55248973E12, 36469.0], [1.5524897E12, 6565.0], [1.552489712E12, 18696.0], [1.552489744E12, 49273.0], [1.552489724E12, 30541.0], [1.552489736E12, 42352.0], [1.552489706E12, 12711.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.552489718E12, 24682.0], [1.55248975E12, 55225.0], [1.55248973E12, 36469.0], [1.5524897E12, 6565.0], [1.552489712E12, 18696.0], [1.552489744E12, 49273.0], [1.552489724E12, 30541.0], [1.552489736E12, 42352.0], [1.552489706E12, 12711.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.552489718E12, 24682.0], [1.55248975E12, 55225.0], [1.55248973E12, 36469.0], [1.5524897E12, 6565.0], [1.552489712E12, 18696.0], [1.552489744E12, 49273.0], [1.552489724E12, 30541.0], [1.552489736E12, 42352.0], [1.552489706E12, 12711.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.55248975E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 30541.0, "minX": 1000.0, "maxY": 58849.0, "series": [{"data": [[1000.0, 30541.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1000.0, 58849.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 1000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 30540.0, "minX": 1000.0, "maxY": 58284.0, "series": [{"data": [[1000.0, 30540.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1000.0, 58284.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 1000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.552489693E12, "maxY": 8.0, "series": [{"data": [[1.552489718E12, 6.0], [1.552489761E12, 5.0], [1.55248972E12, 7.0], [1.552489763E12, 1.0], [1.552489722E12, 6.0], [1.552489724E12, 6.0], [1.552489726E12, 6.0], [1.552489728E12, 5.0], [1.552489708E12, 6.0], [1.552489751E12, 6.0], [1.55248971E12, 6.0], [1.552489753E12, 6.0], [1.552489712E12, 6.0], [1.552489755E12, 6.0], [1.552489714E12, 6.0], [1.552489757E12, 6.0], [1.552489716E12, 6.0], [1.552489759E12, 6.0], [1.552489739E12, 8.0], [1.552489698E12, 6.0], [1.552489741E12, 6.0], [1.5524897E12, 6.0], [1.552489743E12, 5.0], [1.552489702E12, 6.0], [1.552489745E12, 5.0], [1.552489704E12, 5.0], [1.552489747E12, 6.0], [1.552489706E12, 6.0], [1.552489749E12, 6.0], [1.552489729E12, 6.0], [1.552489731E12, 6.0], [1.552489733E12, 6.0], [1.552489735E12, 5.0], [1.552489694E12, 6.0], [1.552489737E12, 6.0], [1.552489696E12, 6.0], [1.552489719E12, 6.0], [1.552489762E12, 6.0], [1.552489721E12, 5.0], [1.552489723E12, 6.0], [1.552489725E12, 6.0], [1.552489727E12, 7.0], [1.552489707E12, 6.0], [1.55248975E12, 6.0], [1.552489709E12, 5.0], [1.552489752E12, 6.0], [1.552489711E12, 6.0], [1.552489754E12, 6.0], [1.552489713E12, 6.0], [1.552489756E12, 6.0], [1.552489715E12, 6.0], [1.552489758E12, 6.0], [1.552489717E12, 6.0], [1.55248976E12, 7.0], [1.552489697E12, 6.0], [1.55248974E12, 4.0], [1.552489699E12, 6.0], [1.552489742E12, 7.0], [1.552489701E12, 6.0], [1.552489744E12, 7.0], [1.552489703E12, 5.0], [1.552489746E12, 6.0], [1.552489705E12, 7.0], [1.552489748E12, 6.0], [1.55248973E12, 6.0], [1.552489732E12, 6.0], [1.552489734E12, 7.0], [1.552489693E12, 3.0], [1.552489736E12, 6.0], [1.552489695E12, 6.0], [1.552489738E12, 6.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.552489763E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.5524897E12, "maxY": 10.0, "series": [{"data": [[1.552489718E12, 1.0], [1.55248975E12, 1.0], [1.55248973E12, 1.0], [1.5524897E12, 1.0], [1.552489712E12, 1.0], [1.552489744E12, 1.0], [1.552489724E12, 1.0], [1.552489736E12, 1.0], [1.552489706E12, 1.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.552489761E12, 6.0], [1.552489804E12, 5.0], [1.552489763E12, 3.0], [1.552489806E12, 6.0], [1.552489765E12, 10.0], [1.552489808E12, 6.0], [1.552489767E12, 6.0], [1.55248981E12, 6.0], [1.552489769E12, 6.0], [1.552489812E12, 6.0], [1.552489794E12, 6.0], [1.552489753E12, 1.0], [1.552489796E12, 6.0], [1.552489755E12, 6.0], [1.552489798E12, 7.0], [1.552489757E12, 6.0], [1.5524898E12, 6.0], [1.552489759E12, 6.0], [1.552489802E12, 6.0], [1.552489782E12, 7.0], [1.552489784E12, 6.0], [1.552489786E12, 6.0], [1.552489788E12, 6.0], [1.55248979E12, 6.0], [1.552489792E12, 6.0], [1.552489772E12, 6.0], [1.552489815E12, 6.0], [1.552489774E12, 6.0], [1.552489817E12, 6.0], [1.552489776E12, 6.0], [1.552489819E12, 6.0], [1.552489778E12, 6.0], [1.552489821E12, 5.0], [1.55248978E12, 6.0], [1.552489823E12, 1.0], [1.552489803E12, 7.0], [1.552489762E12, 5.0], [1.552489805E12, 6.0], [1.552489764E12, 5.0], [1.552489807E12, 6.0], [1.552489766E12, 6.0], [1.552489809E12, 6.0], [1.552489768E12, 5.0], [1.552489811E12, 6.0], [1.55248977E12, 6.0], [1.552489813E12, 5.0], [1.552489793E12, 6.0], [1.552489795E12, 6.0], [1.552489754E12, 6.0], [1.552489797E12, 6.0], [1.552489756E12, 6.0], [1.552489799E12, 5.0], [1.552489758E12, 6.0], [1.552489801E12, 6.0], [1.55248976E12, 6.0], [1.552489783E12, 5.0], [1.552489785E12, 6.0], [1.552489787E12, 6.0], [1.552489789E12, 6.0], [1.552489791E12, 6.0], [1.552489771E12, 6.0], [1.552489814E12, 7.0], [1.552489773E12, 6.0], [1.552489816E12, 6.0], [1.552489775E12, 6.0], [1.552489818E12, 7.0], [1.552489777E12, 6.0], [1.55248982E12, 5.0], [1.552489779E12, 6.0], [1.552489781E12, 6.0]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.552489823E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.5524897E12, "maxY": 10.0, "series": [{"data": [[1.552489718E12, 1.0], [1.55248975E12, 1.0], [1.55248973E12, 1.0], [1.5524897E12, 1.0], [1.552489712E12, 1.0], [1.552489744E12, 1.0], [1.552489724E12, 1.0], [1.552489736E12, 1.0], [1.552489706E12, 1.0]], "isOverall": false, "label": "POST Create reservation-success", "isController": false}, {"data": [[1.552489761E12, 6.0], [1.552489804E12, 5.0], [1.552489763E12, 3.0], [1.552489806E12, 6.0], [1.552489765E12, 10.0], [1.552489808E12, 6.0], [1.552489767E12, 6.0], [1.55248981E12, 6.0], [1.552489769E12, 6.0], [1.552489812E12, 6.0], [1.552489794E12, 6.0], [1.552489753E12, 1.0], [1.552489796E12, 6.0], [1.552489755E12, 6.0], [1.552489798E12, 7.0], [1.552489757E12, 6.0], [1.5524898E12, 6.0], [1.552489759E12, 6.0], [1.552489802E12, 6.0], [1.552489782E12, 7.0], [1.552489784E12, 6.0], [1.552489786E12, 6.0], [1.552489788E12, 6.0], [1.55248979E12, 6.0], [1.552489792E12, 6.0], [1.552489772E12, 6.0], [1.552489815E12, 6.0], [1.552489774E12, 6.0], [1.552489817E12, 6.0], [1.552489776E12, 6.0], [1.552489819E12, 6.0], [1.552489778E12, 6.0], [1.552489821E12, 5.0], [1.55248978E12, 6.0], [1.552489823E12, 1.0], [1.552489803E12, 7.0], [1.552489762E12, 5.0], [1.552489805E12, 6.0], [1.552489764E12, 5.0], [1.552489807E12, 6.0], [1.552489766E12, 6.0], [1.552489809E12, 6.0], [1.552489768E12, 5.0], [1.552489811E12, 6.0], [1.55248977E12, 6.0], [1.552489813E12, 5.0], [1.552489793E12, 6.0], [1.552489795E12, 6.0], [1.552489754E12, 6.0], [1.552489797E12, 6.0], [1.552489756E12, 6.0], [1.552489799E12, 5.0], [1.552489758E12, 6.0], [1.552489801E12, 6.0], [1.55248976E12, 6.0], [1.552489783E12, 5.0], [1.552489785E12, 6.0], [1.552489787E12, 6.0], [1.552489789E12, 6.0], [1.552489791E12, 6.0], [1.552489771E12, 6.0], [1.552489814E12, 7.0], [1.552489773E12, 6.0], [1.552489816E12, 6.0], [1.552489775E12, 6.0], [1.552489818E12, 7.0], [1.552489777E12, 6.0], [1.55248982E12, 5.0], [1.552489779E12, 6.0], [1.552489781E12, 6.0]], "isOverall": false, "label": "POST Create reservation-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.552489823E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.5524897E12, "maxY": 10.0, "series": [{"data": [[1.552489718E12, 1.0], [1.55248975E12, 1.0], [1.55248973E12, 1.0], [1.5524897E12, 1.0], [1.552489712E12, 1.0], [1.552489744E12, 1.0], [1.552489724E12, 1.0], [1.552489736E12, 1.0], [1.552489706E12, 1.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.552489761E12, 6.0], [1.552489804E12, 5.0], [1.552489763E12, 3.0], [1.552489806E12, 6.0], [1.552489765E12, 10.0], [1.552489808E12, 6.0], [1.552489767E12, 6.0], [1.55248981E12, 6.0], [1.552489769E12, 6.0], [1.552489812E12, 6.0], [1.552489794E12, 6.0], [1.552489753E12, 1.0], [1.552489796E12, 6.0], [1.552489755E12, 6.0], [1.552489798E12, 7.0], [1.552489757E12, 6.0], [1.5524898E12, 6.0], [1.552489759E12, 6.0], [1.552489802E12, 6.0], [1.552489782E12, 7.0], [1.552489784E12, 6.0], [1.552489786E12, 6.0], [1.552489788E12, 6.0], [1.55248979E12, 6.0], [1.552489792E12, 6.0], [1.552489772E12, 6.0], [1.552489815E12, 6.0], [1.552489774E12, 6.0], [1.552489817E12, 6.0], [1.552489776E12, 6.0], [1.552489819E12, 6.0], [1.552489778E12, 6.0], [1.552489821E12, 5.0], [1.55248978E12, 6.0], [1.552489823E12, 1.0], [1.552489803E12, 7.0], [1.552489762E12, 5.0], [1.552489805E12, 6.0], [1.552489764E12, 5.0], [1.552489807E12, 6.0], [1.552489766E12, 6.0], [1.552489809E12, 6.0], [1.552489768E12, 5.0], [1.552489811E12, 6.0], [1.55248977E12, 6.0], [1.552489813E12, 5.0], [1.552489793E12, 6.0], [1.552489795E12, 6.0], [1.552489754E12, 6.0], [1.552489797E12, 6.0], [1.552489756E12, 6.0], [1.552489799E12, 5.0], [1.552489758E12, 6.0], [1.552489801E12, 6.0], [1.55248976E12, 6.0], [1.552489783E12, 5.0], [1.552489785E12, 6.0], [1.552489787E12, 6.0], [1.552489789E12, 6.0], [1.552489791E12, 6.0], [1.552489771E12, 6.0], [1.552489814E12, 7.0], [1.552489773E12, 6.0], [1.552489816E12, 6.0], [1.552489775E12, 6.0], [1.552489818E12, 7.0], [1.552489777E12, 6.0], [1.55248982E12, 5.0], [1.552489779E12, 6.0], [1.552489781E12, 6.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.552489823E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

